{"version":3,"sources":["Login/LoginForm.js","List/ListOfUsers.js","App.js","reportWebVitals.js","index.js"],"names":["linkAuth","userData","username","token","LoginForm","state","password","errors","submitting","onChange","e","name","target","value","setState","prevState","handleBlur","validateFields","Object","keys","length","console","log","usernameRegexp","RegExp","passwordRegexp","test","toString","onSubmit","a","fetchApi","url","options","Promise","resolve","reject","fetch","then","response","status","base","json","data","catch","error","method","mode","headers","body","JSON","stringify","props","updateData","onLogin","preventDefault","this","className","htmlFor","type","id","placeholder","onBlur","onClick","disabled","React","Component","ListOfUsers","item","href","App","getList","dataToken","usersList","showList","switchAuth","toggleModal","showModal","sortListAZ","sort","b","sortListZA","filterUsername","document","getElementById","result","map","user","toLocaleLowerCase","includes","classList","remove","add","Modal","isOpen","toggle","ModalBody","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b9172e1c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst linkAuth = \"https://emphasoft-test-assignment.herokuapp.com/api-token-auth/\";\r\n\r\n// for connection \"http://emphasoft-test-assignment.herokuapp.com/api-token-auth/\" method=\"POST\"\\\r\n/*fetch(\"http://emphasoft-test-assignment.herokuapp.com/api-token-auth/\", {\r\n    method: \"POST\",\r\n    mode:\"cors\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n        username : \"test_super\",\r\n        password: \"Nf<U4f<rDbtDxAPn\",\r\n    })\r\n})*/\r\n    let userData = {username: \"\", token: \"\"}\r\n\r\nexport default class LoginForm extends React.Component {\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        errors: {},\r\n        submitting: false,\r\n    };\r\n\r\n    onChange = e => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        this.setState(prevState =>({\r\n            [name]: value,\r\n            errors : {\r\n                ...prevState.errors,\r\n                [name]: null,\r\n                base: null\r\n            }\r\n        }));\r\n    }\r\n    handleBlur = () =>{\r\n        const errors = this.validateFields();\r\n        if (Object.keys(errors).length > 0){\r\n            this.setState(prevState =>({\r\n                errors : {\r\n                    ...prevState.errors,\r\n                    ...errors\r\n                }\r\n            }));\r\n        }\r\n        console.log(errors);\r\n    }\r\n\r\n    validateFields = () => {\r\n        const errors = {};\r\n\r\n        const usernameRegexp = new RegExp(\"^[\\\\w.@+-]+$\");\r\n        const passwordRegexp = new RegExp(\"^(?=.*[A-Z])(?=.*\\\\d).{8,}$\");\r\n        if (this.state.username === \"\"){\r\n            errors.username = \"Cann`t be empty\"\r\n        }\r\n        if (this.state.password === \"\"){\r\n            errors.password = \"Cann`t be empty\"\r\n        }\r\n        if (this.state.username && !usernameRegexp.test(this.state.username.toString())){\r\n            errors.username = \"Should contain: A-z and '@ + - _' \"\r\n        }\r\n        if (this.state.password && !passwordRegexp.test(this.state.password.toString())){\r\n            errors.password = \"Should contain uppercase and lowercase letters, number. And must be between 8 and 150 letters\"\r\n        }\r\n        if(this.state.username.length > 150){\r\n            errors.username = \"Max 150 symbols\"\r\n        }\r\n        if(this.state.password.length > 150){\r\n            errors.password = \"Max 150 symbols\"\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    onSubmit = async () => {\r\n        const fetchApi = (url, options = {}) => {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(url, options)\r\n                    .then(response => {\r\n                        if (response.status < 400) {\r\n                            this.setState({\r\n                                errors: {\r\n                                    base: null\r\n                                }\r\n                            })\r\n                            return response.json();\r\n                        } else if (response.status === 400) {\r\n                            this.setState({\r\n                                errors: {\r\n                                    base: \"Enter the correct username / password\"\r\n                                }\r\n                            })\r\n                        } else {\r\n\r\n                            throw response;\r\n\r\n                        }\r\n                    })\r\n                    .then(data => {\r\n                        resolve(data);\r\n                    })\r\n                    .catch(response => {\r\n                        response.json().then(error => {\r\n                            reject(error);\r\n                        })\r\n                    })\r\n\r\n            })\r\n\r\n        }\r\n        this.setState({\r\n            submitting: true\r\n        });\r\n\r\n        const data = await fetchApi(linkAuth, {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n            })\r\n        }).then(data => {\r\n            console.log(data)\r\n            if (data){\r\n                userData.username = this.state.username\r\n                userData.token = data[\"token\"]\r\n                console.log(userData)\r\n            }\r\n            this.props.updateData(userData)\r\n            this.setState({\r\n                submitting: false\r\n            });\r\n\r\n        })\r\n    }\r\n\r\n    //How to get list of users\r\n    /*  fetch(linkGetList, {\r\n             method: \"GET\",\r\n             headers: {\r\n                 \"Authorization\": `Token ${dataToken}`\r\n             }\r\n         }).then(response => {\r\n             idList = response;\r\n             console.log(idList)\r\n         })*/\r\n\r\n    onLogin = e =>{\r\n        e.preventDefault();\r\n        const errors = this.validateFields();\r\n\r\n        if (Object.keys(errors).length > 0){\r\n            this.setState(prevState =>({\r\n                errors : {\r\n                    ...prevState.errors,\r\n                    ...errors\r\n                }\r\n            }));\r\n        } else {\r\n            this.onSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {username, password, errors, submitting} = this.state;\r\n        return (\r\n            <div className=\"form-login-container \">\r\n                <form className=\"form-login \">\r\n                    <h1 className=\"h3 mb-3 font-weight-normal text-center\">\r\n                        Authorization\r\n                    </h1>\r\n                    <div className=\"form-group mt-2\">\r\n                        <label htmlFor=\"username\">User</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control mt-1\"\r\n                            id = \"username\"\r\n                            placeholder=\"User name\"\r\n                            name = \"username\"\r\n                            value={username}\r\n                            onChange={this.onChange}\r\n                            onBlur={this.handleBlur}\r\n                        />\r\n                        <div className=\"invalid-form\"> {errors.username} </div>\r\n                    </div>\r\n                    <div className=\"form-group mt-2\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            className=\"form-control mt-1\"\r\n                            id = \"password\"\r\n                            placeholder=\"Password\"\r\n                            name = \"password\"\r\n                            value={password}\r\n                            onChange={this.onChange}\r\n                            onBlur={this.handleBlur}\r\n                        />\r\n                        <div className=\"invalid-form\"> {errors.password} </div>\r\n                    </div>\r\n\r\n                    <button\r\n                        type = \"submit\"\r\n                        className=\"btn btn-lg btn-primary btn-block mt-3 \"\r\n                        onClick={this.onLogin}\r\n                        disabled={submitting}\r\n                    >Sing in </button>\r\n                    <div className=\"invalid-form\"> {errors.base} </div>\r\n                </form>\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport default class ListOfUsers extends React.Component {\r\n    render() {\r\n        const {item} = this.props\r\n        return (\r\n          <div className=\"list-group\">\r\n              <h1 className=\"list-group-item\">\r\n                  <a href=\"#\" className=\"list-group-item list-group-item-action flex-column align-items-start active\">\r\n                      <div className=\"d-flex w-100 justify-content-between\">\r\n                          <h5 className=\"mb-1\">Username: {item['username']}</h5>\r\n                          <small> ID: {item['id']}</small>\r\n                      </div>\r\n                      <p className=\"mb-1\">  First Name is: {item['first_name']} , Second Name is: {item['last_name']}. <br/> </p>\r\n                       <p className=\"text-decoration-underline \">   {item['is_superuser'] === true ? \"And this person is superuser\" : \"Unfortunately this person isn`t superuser\"} </p>\r\n                      <small>Account active : {item['is_active'] === true ? \"YES\" : \"NO\"}</small>\r\n                  </a>\r\n              </h1>\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React,{Component} from 'react'\r\nimport './App.css';\r\nimport { Modal, ModalBody } from 'reactstrap';\r\nimport LoginForm from \"./Login/LoginForm\";\r\nimport ListOfUsers from \"./List/ListOfUsers\";\r\n\r\nconst linkGetList = \"https://emphasoft-test-assignment.herokuapp.com/api/v1/users/\"\r\n\r\n\r\nclass App extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            userData : {},\r\n            switchAuth: false,\r\n            usersList: {},\r\n            showList: false,\r\n        }\r\n    }\r\n\r\n    //How to get list of users\r\n    /*  fetch(linkGetList, {\r\n             method: \"GET\",\r\n             headers: {\r\n                 \"Authorization\": `Token ${dataToken}`\r\n             }\r\n         }).then(response => {\r\n             idList = response;\r\n             console.log(idList)\r\n         })*/\r\n\r\n\r\n    // Получаем лист через промис\r\n    getList = async () => {\r\n        const dataToken = this.state.userData.token;\r\n        const fetchApi = (url, options = {}) =>{\r\n            return new Promise((resolve, reject) =>{\r\n                fetch(url,options)\r\n                    .then(response =>{\r\n                        if (response.status < 400){\r\n                            return response.json()\r\n                        }else{\r\n                            throw response;\r\n                        }\r\n                    })\r\n                    .then(data => {\r\n                        resolve(data)\r\n                    })\r\n                    .catch(response =>{\r\n                        response.json().then(error =>{\r\n                            reject(error);\r\n                        })\r\n                    })\r\n            })\r\n        }\r\n        //Отправляем GET запрос на сервер вместе с токеном\r\n        const userList = await fetchApi(linkGetList, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Authorization\": `Token ${dataToken}`\r\n                }\r\n            })\r\n            // Записываем данные и включаем тригер для показа листа\r\n            .then(data => {\r\n                console.log(data);\r\n                this.setState({\r\n                    usersList: data,\r\n                    showList: true\r\n                    })\r\n            })\r\n    }\r\n\r\n\r\n\r\n    // получаем данные формы\r\n    updateData = userData =>{\r\n        if (userData.username !== \"\" && userData.token !== \"\"){\r\n            this.setState({\r\n                userData: userData,\r\n                switchAuth: true,\r\n            })\r\n            if (userData){\r\n                this.toggleModal();\r\n            }\r\n        }\r\n    }\r\n\r\n    //Переключатель видмости окна авторизации\r\n    toggleModal = () =>{\r\n        this.setState(prevState =>({\r\n            showModal: !prevState.showModal\r\n        }));\r\n    }\r\n\r\n    //Сортировка по возрастанию\r\n    sortListAZ = () => {\r\n        this.setState({\r\n            usersList: this.state.usersList.sort((a, b) => a.id > b.id ? 1 : -1)\r\n        })\r\n\r\n    }\r\n\r\n    //Сортировка по убыванию\r\n    sortListZA = () => {\r\n        this.setState({\r\n            usersList: this.state.usersList.sort((a, b) => a.id < b.id ? 1 : -1)\r\n        })\r\n\r\n    }\r\n\r\n    //Фильрация по UserName\r\n    filterUsername = () => {\r\n        const name = document.getElementById('filter').value\r\n        let result = this.state.usersList.map(user =>{\r\n            if(!user['username'].toLocaleLowerCase().includes(name)){\r\n                document.getElementById(user['username']).classList.add('d-none')\r\n            } else {\r\n                document.getElementById(user['username']).classList.remove('d-none')\r\n            }\r\n        })\r\n        console.log(result);\r\n    }\r\n\r\n    render() {\r\n        const {usersList} = this.state;\r\n        return (\r\n          <div className=\"container d-block\">\r\n              <div className=\"container d-flex justify-content-center mt-5 \">\r\n                  {!this.state.switchAuth ? <button className=\"btn btn-primary btn-block w-50\" type=\"submit\" onClick={this.toggleModal}>\r\n                      Login\r\n                  </button> : <p className=\"text-dark\" >  You are login as : {this.state.userData.username} </p> }\r\n                  <Modal isOpen={this.state.showModal} toggle={this.toggleModal}>\r\n                      <ModalBody>\r\n                        <LoginForm updateData = {this.updateData}/>\r\n                      </ModalBody>\r\n                  </Modal>\r\n              </div>\r\n              <div className=\"container d-flex justify-content-center mt-5 mb-3\">\r\n                  {this.state.switchAuth && <button\r\n                      className=\"btn btn-primary btn-lg btn-dark \"\r\n                        onClick={this.getList}>\r\n                      Get list of users\r\n                  </button>}\r\n              </div>\r\n              <div className=\"container d-flex  justify-content-around\">\r\n                  {this.state.showList && <button\r\n                      className=\"btn btn-secondary \"\r\n                        onClick={this.sortListAZ}>\r\n                      Sort: <br/>Low to High\r\n                  </button>\r\n                  }\r\n                  {this.state.showList && <button\r\n                      className=\"btn btn-secondary w-auto\"\r\n                      onClick={this.sortListZA}>\r\n                      Sort: <br/>High to Low\r\n                  </button>\r\n                  }\r\n                  {this.state.showList && <input\r\n                    type=\"text\"\r\n                    className=\"form-text\"\r\n                    onChange={this.filterUsername}\r\n                    id=\"filter\"\r\n                    placeholder=\"Filter of username\"\r\n                  />\r\n                  }\r\n              </div>\r\n              <div className=\"list-group\">\r\n                  {this.state.showList && usersList.map(list =>{\r\n                      console.log(list)\r\n                      return (\r\n                          <div id={list['username']} key={list['id']} className=\"list-group-item\">\r\n                              <ListOfUsers item={list}/>\r\n                          </div>\r\n                      )\r\n                  })}\r\n              </div>\r\n          </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}